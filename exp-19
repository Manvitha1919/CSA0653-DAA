#include <stdio.h>

// Structure to represent items
struct Item {
    int value;
    int weight;
};

// Function to perform Knapsack using a greedy approach
void knapsackGreedy(struct Item items[], int n, int capacity) {
    // Calculate the value-to-weight ratio for each item
    double ratios[n];
    for (int i = 0; i < n; i++) {
        ratios[i] = (double) items[i].value / items[i].weight;
    }

    // Sort items based on value-to-weight ratio in descending order
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (ratios[i] < ratios[j]) {
                double tempRatio = ratios[i];
                ratios[i] = ratios[j];
                ratios[j] = tempRatio;

                struct Item temp = items[i];
                items[i] = items[j];
                items[j] = temp;
            }
        }
    }

    // Initialize variables for tracking the knapsack
    int currentWeight = 0;
    double totalValue = 0.0;

    // Fill the knapsack with items in the order of sorted ratio until capacity is full
    for (int i = 0; i < n; i++) {
        if (currentWeight + items[i].weight <= capacity) {
            currentWeight += items[i].weight;
            totalValue += items[i].value;
            printf("Added item with value %d and weight %d\n", items[i].value, items[i].weight);
        } else {
            // Calculate the remaining capacity that can be filled fractionally
            int remainingCapacity = capacity - currentWeight;
            totalValue += items[i].value * ((double) remainingCapacity / items[i].weight);
            printf("Added item with value %d and weight %d fractionally\n", items[i].value, items[i].weight);
            break;
        }
    }

    printf("Total value in the knapsack: %.2lf\n", totalValue);
}

int main() {
    struct Item items[] = {{60, 10}, {100, 20}, {120, 30}};
    int n = sizeof(items) / sizeof(items[0]);
    int capacity = 50;

    printf("Items available:\n");
    for (int i = 0; i < n; i++) {
        printf("Item %d: Value = %d, Weight = %d\n", i + 1, items[i].value, items[i].weight);
    }

    printf("\nKnapsack capacity: %d\n", capacity);
    printf("\nKnapsack solution using greedy approach:\n");
    knapsackGreedy(items, n, capacity);

    return 0;
}
