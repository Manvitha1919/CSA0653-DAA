#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 10 // Maximum number of vertices in the graph

int n; // Number of vertices
int graph[MAX_VERTICES][MAX_VERTICES]; // Adjacency matrix representation of the graph
int path[MAX_VERTICES]; // Array to store the Hamiltonian circuit path
bool visited[MAX_VERTICES]; // Array to track visited vertices

// Function to check if vertex v can be added to the Hamiltonian circuit
bool isSafe(int v, int pos) {
    // Check if vertex v is adjacent to the last added vertex in path and not already visited
    if (graph[path[pos - 1]][v] == 0)
        return false;

    // Check if vertex has already been visited
    for (int i = 0; i < pos; i++)
        if (path[i] == v)
            return false;

    return true;
}

// Function to find Hamiltonian circuit using backtracking
bool hamiltonianCircuitUtil(int pos) {
    // Base case: If all vertices are included in the path
    if (pos == n) {
        // Check if there is an edge from the last added vertex to the first vertex
        if (graph[path[pos - 1]][path[0]] == 1)
            return true;
        else
            return false;
    }

    // Try different vertices as the next candidate in the path
    for (int v = 1; v < n; v++) {
        if (isSafe(v, pos)) {
            path[pos] = v;
            visited[v] = true;

            if (hamiltonianCircuitUtil(pos + 1))
                return true;

            // Backtrack
            path[pos] = -1;
            visited[v] = false;
        }
    }

    return false;
}

// Function to find and print Hamiltonian circuit
void findHamiltonianCircuit() {
    // Initialize path with -1 (indicating no vertex is included in path yet)
    for (int i = 0; i < n; i++)
        path[i] = -1;

    // Start from vertex 0 (assuming graph is connected)
    path[0] = 0;
    visited[0] = true;

    if (hamiltonianCircuitUtil(1)) {
        printf("Hamiltonian Circuit found:\n");
        for (int i = 0; i < n; i++)
            printf("%d ", path[i]);
        printf("%d\n", path[0]); // Print the first vertex again to complete the circuit
    } else {
        printf("No Hamiltonian Circuit exists for the given graph.\n");
    }
}

int main() {
    // Input the number of vertices
    printf("Enter the number of vertices (maximum %d): ", MAX_VERTICES);
    scanf("%d", &n);

    // Input the adjacency matrix
    printf("Enter the adjacency matrix (%d x %d):\n", n, n);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &graph[i][j]);

    // Initialize visited array
    for (int i = 0; i < n; i++)
        visited[i] = false;

    // Find and print Hamiltonian Circuit
    findHamiltonianCircuit();

    return 0;
}
