#include <stdio.h>
#include <stdbool.h>

#define MAX_SIZE 100 // Maximum size of the set

// Global variables
int set[MAX_SIZE];  // Array to store the set elements
int subset[MAX_SIZE]; // Array to store the current subset
bool found = false; // Flag to indicate if a solution is found

// Function to print the subset that sums to the target
void printSubset(int subset[], int subsetSize) {
    printf("Subset that sums to the target:\n");
    printf("{ ");
    for (int i = 0; i < subsetSize; i++) {
        printf("%d ", subset[i]);
    }
    printf("}\n");
}

// Function to find subset with sum equal to given target using backtracking
void subsetSum(int set[], int subset[], int n, int subsetSize, int sum, int target, int index) {
    if (sum == target) {
        printSubset(subset, subsetSize);
        found = true;
        return;
    }

    // Explore further only if there's a possibility of finding the subset
    for (int i = index; i < n; i++) {
        if (sum + set[i] <= target) {
            subset[subsetSize] = set[i];
            subsetSum(set, subset, n, subsetSize + 1, sum + set[i], target, i + 1);
            if (found)
                return;
        }
    }
}

int main() {
    int n; // Size of the set
    int target; // Target sum

    // Input the size of the set
    printf("Enter the number of elements in the set: ");
    scanf("%d", &n);

    // Input the elements of the set
    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &set[i]);
    }

    // Input the target sum
    printf("Enter the target sum: ");
    scanf("%d", &target);

    // Call subsetSum function to find subset with sum equal to target
    subsetSum(set, subset, n, 0, 0, target, 0);

    if (!found) {
        printf("No subset found with sum equal to target.\n");
    }

    return 0;
}
